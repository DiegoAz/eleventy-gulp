{"version":3,"sources":["base/animations.styl","master.css","../../node_modules/axis/axis/reset.styl","base/base.styl","base/mixins.styl","base/svg-icon.styl","../../node_modules/axis/axis/typography.styl","base/typography.styl","components/blog-post.styl","../../node_modules/rupture/rupture/index.styl","components/branding-box.styl","components/hero-section.styl","../../node_modules/axis/axis/utilities.styl","../../node_modules/axis/axis/interaction.styl","components/main-nav.styl","components/menu-bar.styl","components/posts-list.styl","components/social-nav.styl","master.styl"],"names":[],"mappings":"AAIE;EACE;IACE,mBAAU;ECQd;EDPE;IACE,qBAAU;ECSd;EDRE;IACE,qBAAU;ECUd;AACF;ADjBE;EACE;IACE,mBAAU;EC8Bd;ED7BE;IACE,qBAAU;EC+Bd;ED9BE;IACE,qBAAU;ECgCd;AACF;AClCE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAoCA,SAAQ;EACR,UAAS;EACT,SAAQ;EACR,UAAS;EAGT,oBAAa;EACb,mBAAY;EACZ,oBAAa;EACb,eAAW;EACX,wBAAgB;ADuDlB;AC3FE;EAuCA,cAAa;EACb,WAAO;EACP,gBAAY;ADuDd;AC9FE;;EACE,gBAAY;ADiGhB;AChGE;EAwCA,yBAAiB;EACjB,iBAAgB;EAChB,sBAAgB;AD2DlB;ACnGE;;;EA2CA,gBAAY;EACZ,mBAAa;EACb,sBAAgB;AD6DlB;ACxGE;EACE,YAAQ;AD0GZ;ACoHE;EACE,sBAAY;ADlHhB;ACoHE;;;EAGE,mBAAY;ADlHhB;AEzIA;EACE,qBAAiB;AF2InB;AGrHA;EACC,kBAAc;EACd,oCAAa;EACb,kBAAY;EACZ,oBAAa;EACb,yLAAgE;AHuHjE;AGrHA;EACC,kBAAc;EACd,sCAAa;EACb,kBAAY;EACZ,gBAAa;EACb,+LAAkE;AHuHnE;AGrHA;EACC,kBAAc;EACd,iCAAa;EACb,kBAAY;EACZ,gBAAa;EACb,gLAA6D;AHuH9D;AGrHA;EACC,kBAAc;EACd,mCAAa;EACb,kBAAY;EACZ,gBAAa;EACb,sLAA+D;AHuHhE;AGrHA;EACC,kBAAc;EACd,kCAAa;EACb,kBAAY;EACZ,gBAAa;EACb,mLAA8D;AHuH/D;AGrHA;EACC,kBAAc;EACd,oCAAa;EACb,kBAAY;EACZ,gBAAa;EACb,yLAAgE;AHuHjE;AGrHA;EACC,kBAAc;EACd,gCAAa;EACb,kBAAY;EACZ,gBAAa;EACb,6KAA4D;AHuH7D;AGrHA;EACI,mCAAa;EACb,iDAAmD;EACnD,2VAAuF;EAKvF,mBAAa;EACb,kBAAY;AHmHhB;AIzMA;EACC,YAAQ;EACR,WAAO;AJ2MR;AIzMA;EACC,aAAM;AJ2MP;AKuDE;EACE,gBAAY;EACZ,WAAO;ALrDX;AKuDE;EACE,gBAAY;EACZ,WAAO;ALrDX;AMvLA;EACE,mFAAa;EACb,gBAAY;ANyLd;AMvLA;EACE,cAAM;EACN,mFAAY;ANyLd;AMxLE;EACE,WAAM;AN0LV;AOnNA;EACE,0BAAQ;APqNV;AOnNE;EAEE,kBAA2B;APoN/B;AQ1FW;EAAA;IDxHL,gBAA2B;EPsN/B;AACF;AQ/FW;EAAA;IDtHL,cAA4B;EPyNhC;AACF;AOxNE;EACE,cAAQ;EACR,kBAAc;AP0NlB;AOxNE;EACE,WAAM;EACN,iBAAa;EACb,kBAAc;AP0NlB;AOxNE;EACE,gFAAa;EACb,mBAA2B;EAC3B,oBAAc;AP0NlB;AQlHW;EAAA;IDtGL,kBAA2B;EP4N/B;AACF;AQvHW;EAAA;IDpGL,iBAA4B;EP+NhC;AACF;AQ5HW;EAAA;IC3IP,gBAAa;ET2Qf;AACF;AS1QE;EACE,aAAQ;AT4QZ;AUnRA;EACE,cAAQ;EACR,iBAAW;AVqRb;AUlRA;EACE,0BAAQ;AVoRV;AQ3IW;EAAA;IEvIP,gBAAY;IACZ,mBAAa;IACb,gBAAW;EVsRb;AACF;AQlJW;EAAA;IEnIP,gBAAY;EVyRd;AACF;AUvRE;EACE,WAAO;EACP,oCAAY;EACZ,gBAAY;EACZ,eAAU;EACV,kBAA2B;AVyR/B;AQ9JW;EAAA;IExHL,gBAA2B;EV0R/B;AACF;AQnKW;EAAA;IEtHL,cAA4B;EV6RhC;AACF;AU5RE;EACE,uBAAQ;EACR,cAAO;EACP,gFAAa;EACb,eAAU;EACV,cAAU;AV8Rd;AQ/KW;EAAA;IE7GL,kBAA2B;EVgS/B;AACF;AQpLW;EAAA;IE3GL,iBAA4B;EVmShC;AACF;AU/RE;EACE,aAAQ;EACR,UAAM;EACN,uBAAgB;EAEhB,sBAAQ;EACR,kBAAe;EACf,kBAAS;EACT,gBAAW;EACX,mBAA2B;ECtB7B,2EAAY;AXuTd;AYxNE;EACE,iCAAY;AZ0NhB;AQvMW;EAAA;IE1FL,kBAA4B;EVqShC;AACF;AUnSI;EACE,yBAAO;AVqSb;Aa9VA;EACE,aAAQ;EACR,8BAAgB;AbgWlB;AQnNW;EAAA;IK1IP,iBAAa;EbiWf;AACF;AahWE;EACE,cAAO;AbkWX;AahWI;EACE,6BAAe;AbkWrB;AahWE;EACE,mBAA2B;AbkW/B;AQjOW;EAAA;IK/HL,kBAA2B;EboW/B;AACF;AQtOW;EAAA;IK7HL,kBAA4B;EbuWhC;AACF;AcvXA;EACE,8BAAe;EACf,WAAQ;AdyXV;AcvXA;EACE,mBAAa;EACb,aAAS;EACT,8BAAiB;EACjB,cAAQ;EACR,iBAAW;EACX,kBAAS;AdyXX;AQvPW;EAAA;IM/HP,aAAQ;IACR,gBAAS;IACT,kCAAsB;IACtB,2BAAmB;Ed0XrB;AACF;Ae9YA;EACE,cAAY;AfgZd;Ae9YE;EACE,gBAAa;EACb,gBAAY;EACZ,kFAAa;EACb,mBAA2B;EVsH7B,yBAAgB;AL2RlB;Ae7YA;EACE,mBAAa;EACb,0BAAY;EACZ,aAAS;EACT,8BAAuB;EACvB,sBAAe;Af+YjB;Ae7YE;EACE,6BAAe;Af+YnB;Ae7YE;EACE,gBAAa;EACb,iCAAY;EACZ,mBAA2B;Af+Y/B;AQxRW;EAAA;IOrHL,kBAA2B;EfiZ/B;AACF;AQ7RW;EAAA;IOnHL,kBAA4B;EfoZhC;AACF;AenZE;EACE,eAAQ;EACR,gBAAS;EACT,mFAAY;EACZ,mBAA2B;AfqZ/B;AQxSW;EAAA;IO3GL,kBAA2B;EfuZ/B;AACF;AQ7SW;EAAA;IOzGL,kBAA4B;Ef0ZhC;AACF;AezZI;EACE,qBAAS;EACT,gBAAa;Af2ZnB;AexZA;EACE,aAAQ;EACR,OAAM;EACN,UAAS;EACT,oBAAgB;EAChB,eAAU;EACV,MAAK;EACL,YAAO;Af0ZT;AexZA;;EACE,YAAQ;EACR,kBAAU;EACV,WAAO;Af2ZT;AezZA;EACE,yBAAkB;EAClB,YAAQ;EACR,OAAM;EACN,kBAAU;EACV,MAAK;EACL,WAAO;Af2ZT;AezZA;EACE,4BAAqB;EACrB,sBAAiB;Af2ZnB;AQjVW;EAAA;IQ5IP,gBAAa;IACb,aAAU;IACV,oBAAc;EhBiehB;AACF;AiBpdyB;EACvB;IACE,eAAU;IACV,MAAK;IACL,OAAM;IACN,cAAS;IACT,oBAAgB;EjBsdlB;EiBpdA;IACE,UAAM;IACN,YAAQ;IACR,eAAc;IACd,YAAS;EjBsdX;AACF","file":"master.css","sourcesContent":["\n// Rebote\n\n$keyframe-name = rebote\n  @keyframes {$keyframe-name}\n    0%\n      transform scale(1)      \n    20%\n      transform scale(1.3)      \n    100%\n      transform scale(1.1)","@-moz-keyframes rebote {\n  0% {\n    transform: scale(1);\n  }\n  20% {\n    transform: scale(1.3);\n  }\n  100% {\n    transform: scale(1.1);\n  }\n}\n@-webkit-keyframes rebote {\n  0% {\n    transform: scale(1);\n  }\n  20% {\n    transform: scale(1.3);\n  }\n  100% {\n    transform: scale(1.1);\n  }\n}\n@-o-keyframes rebote {\n  0% {\n    transform: scale(1);\n  }\n  20% {\n    transform: scale(1.3);\n  }\n  100% {\n    transform: scale(1.1);\n  }\n}\n@keyframes rebote {\n  0% {\n    transform: scale(1);\n  }\n  20% {\n    transform: scale(1.3);\n  }\n  100% {\n    transform: scale(1.1);\n  }\n}\nhtml,\nbody,\ndiv,\nspan,\napplet,\nobject,\niframe,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\npre,\na,\nabbr,\nacronym,\naddress,\nbig,\ncite,\ncode,\ndel,\ndfn,\nem,\nimg,\nins,\nkbd,\nq,\ns,\nsamp,\nsmall,\nstrike,\nstrong,\nsub,\nsup,\ntt,\nvar,\ndl,\ndt,\ndd,\nol,\nul,\nli,\nfieldset,\nform,\nlabel,\nlegend,\ntable,\ncaption,\ntbody,\ntfoot,\nthead,\ntr,\nth,\ntd {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  outline: 0;\n  font-weight: inherit;\n  font-style: inherit;\n  font-family: inherit;\n  font-size: 100%;\n  vertical-align: baseline;\n}\nbody {\n  line-height: 1;\n  color: #222;\n  background: #fff;\n}\nol,\nul {\n  list-style: none;\n}\ntable {\n  border-collapse: separate;\n  border-spacing: 0;\n  vertical-align: middle;\n}\ncaption,\nth,\ntd {\n  text-align: left;\n  font-weight: normal;\n  vertical-align: middle;\n}\na img {\n  border: none;\n}\nhtml {\n  box-sizing: border-box;\n}\n*,\n*:before,\n*:after {\n  box-sizing: inherit;\n}\na {\n  text-decoration: none;\n}\n@font-face {\n  font-display: swap;\n  font-family: 'ClashDisplay-Variable';\n  font-style: normal;\n  font-weight: 200 700;\n  src: url(\"../fonts/ClashDisplay-Variable.woff2\") format('woff2'), url(\"../fonts/ClashDisplay-Variable.woff\") format('woff'), url(\"../fonts/ClashDisplay-Variable.ttf\") format('truetype');\n}\n@font-face {\n  font-display: swap;\n  font-family: 'ClashDisplay-Extralight';\n  font-style: normal;\n  font-weight: 200;\n  src: url(\"../fonts/ClashDisplay-Extralight.woff2\") format('woff2'), url(\"../fonts/ClashDisplay-Extralight.woff\") format('woff'), url(\"../fonts/ClashDisplay-Extralight.ttf\") format('truetype');\n}\n@font-face {\n  font-display: swap;\n  font-family: 'ClashDisplay-Light';\n  font-style: normal;\n  font-weight: 300;\n  src: url(\"../fonts/ClashDisplay-Light.woff2\") format('woff2'), url(\"../fonts/ClashDisplay-Light.woff\") format('woff'), url(\"../fonts/ClashDisplay-Light.ttf\") format('truetype');\n}\n@font-face {\n  font-display: swap;\n  font-family: 'ClashDisplay-Regular';\n  font-style: normal;\n  font-weight: 400;\n  src: url(\"../fonts/ClashDisplay-Regular.woff2\") format('woff2'), url(\"../fonts/ClashDisplay-Regular.woff\") format('woff'), url(\"../fonts/ClashDisplay-Regular.ttf\") format('truetype');\n}\n@font-face {\n  font-display: swap;\n  font-family: 'ClashDisplay-Medium';\n  font-style: normal;\n  font-weight: 500;\n  src: url(\"../fonts/ClashDisplay-Medium.woff2\") format('woff2'), url(\"../fonts/ClashDisplay-Medium.woff\") format('woff'), url(\"../fonts/ClashDisplay-Medium.ttf\") format('truetype');\n}\n@font-face {\n  font-display: swap;\n  font-family: 'ClashDisplay-Semibold';\n  font-style: normal;\n  font-weight: 600;\n  src: url(\"../fonts/ClashDisplay-Semibold.woff2\") format('woff2'), url(\"../fonts/ClashDisplay-Semibold.woff\") format('woff'), url(\"../fonts/ClashDisplay-Semibold.ttf\") format('truetype');\n}\n@font-face {\n  font-display: swap;\n  font-family: 'ClashDisplay-Bold';\n  font-style: normal;\n  font-weight: 700;\n  src: url(\"../fonts/ClashDisplay-Bold.woff2\") format('woff2'), url(\"../fonts/ClashDisplay-Bold.woff\") format('woff'), url(\"../fonts/ClashDisplay-Bold.ttf\") format('truetype');\n}\n@font-face {\n  font-family: 'Mayenne Sans_Regular';\n  src: url(\"../fonts/Mayenne_Sans-Regular_web.eot\");\n  src: url(\"../fonts/Mayenne_Sans-Regular_web.eot?#iefix\") format('embedded-opentype'), url(\"../fonts/Mayenne_Sans-Regular_web.woff\") format('woff'), url(\"../fonts/Mayenne_Sans-Regular_web.woff2\") format('woff2'), url(\"../fonts/Mayenne_Sans-Regular_web.ttf\") format('truetype'), url(\"../fonts/Mayenne_Sans-Regular_web.svg#svgFontName\") format('svg');\n  font-weight: normal;\n  font-style: normal;\n}\n.svg-icon {\n  height: 24px;\n  width: 24px;\n}\n.svg-icon path {\n  fill: #5a5a5a;\n}\n::-moz-selection {\n  background: #222;\n  color: #fff;\n}\n::selection {\n  background: #222;\n  color: #fff;\n}\nbody {\n  font-family: 'ClashDisplay-Regular', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  line-height: 1.5;\n}\na {\n  color: #515151;\n  font-family: 'ClashDisplay-Regular', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\na:hover {\n  color: #000;\n}\n.blog-post {\n  padding: 2.5em 1em 5em 1em;\n}\n.blog-post > .title {\n  font-size: 2.125em;\n}\n@media only screen and (min-width: 400px) and (max-width: 1050px) {\n  .blog-post > .title {\n    font-size: 2.5em;\n  }\n}\n@media only screen and (min-width: 1050px) {\n  .blog-post > .title {\n    font-size: 3em;\n  }\n}\n.blog-post > .date {\n  display: block;\n  margin-bottom: 3em;\n}\n.blog-post > .image {\n  float: left;\n  margin-right: 2em;\n  margin-bottom: 2em;\n}\n.blog-post > .text {\n  font-family: 'IBM Plex Serif', Georgia, Cambria, 'Times New Roman', Times, serif;\n  font-size: 1.0625em;\n  margin-bottom: 1.2em;\n}\n@media only screen and (min-width: 400px) and (max-width: 1050px) {\n  .blog-post > .text {\n    font-size: 1.125em;\n  }\n}\n@media only screen and (min-width: 1050px) {\n  .blog-post > .text {\n    font-size: 1.25em;\n  }\n}\n@media only screen and (max-width: 400px) {\n  .branding-box {\n    grid-column: 1/3;\n  }\n}\n.branding-box > img {\n  display: none;\n}\nmain {\n  margin: 0 auto;\n  max-width: 1200px;\n}\n.hero-section {\n  padding: 1.5em 1em 5em 1em;\n}\n@media only screen and (min-width: 400px) and (max-width: 1050px) {\n  .hero-section {\n    padding-top: 3em;\n    padding-left: 1.5em;\n    background: #cff;\n  }\n}\n@media only screen and (min-width: 1050px) {\n  .hero-section {\n    padding-top: 5em;\n  }\n}\n.hero-section > .title {\n  color: #222;\n  font-family: 'ClashDisplay-Semibold';\n  line-height: 1.1;\n  max-width: 14ch;\n  font-size: 2.125em;\n}\n@media only screen and (min-width: 400px) and (max-width: 1050px) {\n  .hero-section > .title {\n    font-size: 2.5em;\n  }\n}\n@media only screen and (min-width: 1050px) {\n  .hero-section > .title {\n    font-size: 3em;\n  }\n}\n.hero-section > .message {\n  margin: 1.8em 0 1.7em 0;\n  color: #515151;\n  font-family: 'IBM Plex Serif', Georgia, Cambria, 'Times New Roman', Times, serif;\n  max-width: 35ch;\n  font-size: 1em;\n}\n@media only screen and (min-width: 400px) and (max-width: 1050px) {\n  .hero-section > .message {\n    font-size: 1.125em;\n  }\n}\n@media only screen and (min-width: 1050px) {\n  .hero-section > .message {\n    font-size: 1.25em;\n  }\n}\n.hero-section > .button {\n  display: flex;\n  width: 9em;\n  justify-content: center;\n  border: 1px solid #222;\n  border-radius: 4px;\n  padding: 0.5em 2em;\n  background: #fff;\n  font-size: 1.0625em;\n  transition: border 1s cubic-bezier(0.77, 0, 0.175, 1), box-shadow 0.4s ease;\n}\n.hero-section > .button:hover {\n  box-shadow: 0px 0px 45px 2px #f0f;\n}\n@media only screen and (min-width: 1050px) {\n  .hero-section > .button {\n    font-size: 1.125em;\n  }\n}\n.hero-section > .button:hover {\n  border: 1px solid #bf00bf;\n}\n.main-nav {\n  display: flex;\n  justify-content: space-between;\n}\n@media only screen and (max-width: 400px) {\n  .main-nav {\n    grid-column: 1/-1;\n  }\n}\n.main-nav > .list-item {\n  margin: 0 10px;\n}\n.main-nav > .list-item.-active {\n  border-bottom: 2px solid #222;\n}\n.main-nav > .list-item .link {\n  font-size: 1.0625em;\n}\n@media only screen and (min-width: 400px) and (max-width: 1050px) {\n  .main-nav > .list-item .link {\n    font-size: 1.125em;\n  }\n}\n@media only screen and (min-width: 1050px) {\n  .main-nav > .list-item .link {\n    font-size: 1.125em;\n  }\n}\nheader {\n  border-bottom: 1px dashed #aaa;\n  margin: 0px;\n}\n.nav-bar {\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n  margin: 0 auto;\n  max-width: 1200px;\n  padding: 24px 24px;\n}\n@media only screen and (max-width: 400px) {\n  .nav-bar {\n    display: grid;\n    grid-gap: 24px 0;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr;\n  }\n}\n.post-list {\n  margin-top: 3%;\n}\n.post-list > .heading {\n  line-height: 5em;\n  margin-left: 1em;\n  font-family: 'ClashDisplay-Medium', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 1.0625em;\n  text-transform: uppercase;\n}\n.blog-entry {\n  align-items: center;\n  border-top: 1px solid #222;\n  display: grid;\n  grid-template-columns: 1fr 3fr;\n  justify-items: stretch;\n}\n.blog-entry:last-child {\n  border-bottom: 1px solid #222;\n}\n.blog-entry > .date {\n  margin-left: 1em;\n  font-family: 'ClashDisplay-Light';\n  font-size: 1.0625em;\n}\n@media only screen and (min-width: 400px) and (max-width: 1050px) {\n  .blog-entry > .date {\n    font-size: 1.125em;\n  }\n}\n@media only screen and (min-width: 1050px) {\n  .blog-entry > .date {\n    font-size: 1.125em;\n  }\n}\n.blog-entry > .link {\n  cursor: pointer;\n  padding: 2em 1em;\n  font-family: 'ClashDisplay-Regular', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 1.0625em;\n}\n@media only screen and (min-width: 400px) and (max-width: 1050px) {\n  .blog-entry > .link {\n    font-size: 1.125em;\n  }\n}\n@media only screen and (min-width: 1050px) {\n  .blog-entry > .link {\n    font-size: 1.125em;\n  }\n}\n.blog-entry > .link span {\n  display: inline-block;\n  white-space: pre;\n}\n.hover-reveal {\n  height: 150px;\n  left: 0;\n  opacity: 0;\n  pointer-events: none;\n  position: fixed;\n  top: 0;\n  width: 200px;\n}\n.hover-reveal__inner,\n.hover-reveal__img {\n  height: 100%;\n  position: relative;\n  width: 100%;\n}\n.hover-reveal__deco {\n  background-color: #181314;\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  width: 100%;\n}\n.hover-reveal__img {\n  background-position: 50% 50%;\n  background-size: cover;\n}\n@media only screen and (max-width: 400px) {\n  .social-nav {\n    grid-column: 3/4;\n    grid-row: 1/2;\n    justify-self: center;\n  }\n}\n@media (any-pointer: fine) {\n  .cursor {\n    position: fixed;\n    top: 0;\n    left: 0;\n    display: block;\n    pointer-events: none;\n  }\n  .cursor__inner {\n    fill: #f0f;\n    stroke: #f0f;\n    stroke-width: 1;\n    opacity: 0.5;\n  }\n}\n","// -----\n// Reset\n// -----\n\n// Global Reset\n// Based on [Eric Meyer's reset](http://meyerweb.com/eric/thoughts/2007/05/01/reset-reloaded/)\n// ported from Nib\n\nglobal-reset()\n  html, body, div, span, applet, object, iframe,\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n  a, abbr, acronym, address, big, cite, code,\n  del, dfn, em, img, ins, kbd, q, s, samp,\n  small, strike, strong, sub, sup, tt, var,\n  dl, dt, dd, ol, ul, li,\n  fieldset, form, label, legend,\n  table, caption, tbody, tfoot, thead, tr, th, td\n    reset-box-model()\n    reset-font()\n  body\n    reset-body()\n  ol, ul\n    list-style: none\n  table\n    reset-table()\n  caption, th, td\n    reset-table-cell()\n  a img\n    border: none\n\nnested-reset()\n  div, span, object, iframe, h1, h2, h3, h4, h5, h6, p,\n  pre, a, abbr, acronym, address, code, del, dfn, em, img,\n  dl, dt, dd, ol, ul, li, fieldset, form, label,\n  legend, caption, tbody, tfoot, thead, tr\n    reset-box-model()\n    reset-font()\n  table\n    reset-table()\n  caption, th, td\n    reset-table-cell()\n  a img\n    border: none\n\nreset-box-model()\n  margin: 0\n  padding: 0\n  border: 0\n  outline: 0\n\nreset-font()\n  font-weight: inherit\n  font-style: inherit\n  font-family: inherit\n  font-size: 100%\n  vertical-align: baseline\n\nreset-body()\n  line-height: 1\n  color: black\n  background: white\n\nreset-table()\n  border-collapse: separate\n  border-spacing: 0\n  vertical-align: middle\n\nreset-table-cell()\n  text-align: left\n  font-weight: normal\n  vertical-align: middle\n\nreset-html5()\n  article, aside, canvas, details, figcaption,\n  figure, footer, header, hgroup, menu, nav,\n  section, summary, main\n    reset-box-model()\n    display: block\n  audio, canvas, video\n    display inline-block\n    *display inline\n    *zoom 1\n  audio:not([controls]),[hidden]\n    display none\n\n// Mixin: Normalize CSS\n// Based on v4.0.0 https://github.com/necolas/normalize.css\n\nnormalize-css()\n  html\n    font-family: sans-serif\n    -ms-text-size-adjust: 100%\n    -webkit-text-size-adjust: 100%\n\n  body\n    margin 0\n\n  article, aside, details, figcaption, figure, footer, header, main, menu, nav, section, summary\n    display: block\n\n  audio, canvas, progress, video\n    display: inline-block\n\n  audio:not([controls])\n    display: none\n    height: 0\n\n  progress\n    vertical-align: baseline\n\n  template, [hidden]\n    display: none\n\n  a\n    background-color: transparent\n\n  a:active, a:hover\n    outline-width: 0\n\n  abbr[title]\n    border-bottom: none\n    text-decoration: underline\n    text-decoration: underline dotted\n\n  b, strong\n    font-weight: inherit\n\n  dfn\n    font-style: italic\n\n  h1\n    font-size: 2em\n    margin: 0.67em 0\n\n  mark\n    background-color: #ff0\n    color: #000\n\n  small\n    font-size: 80%\n\n  sub, sup\n    font-size: 75%\n    line-height: 0\n    position: relative\n    vertical-align: baseline\n\n  sub\n    bottom: -0.25em\n\n  sup\n    top: -0.5em\n\n  img\n    border-style: none\n\n  svg:not(:root)\n    overflow: hidden\n\n  code, kbd, pre, samp\n    font-family: monospace, monospace\n    font-size: 1em\n\n  figure\n    margin: 1em 40px\n\n  hr\n    box-sizing: content-box\n    height: 0\n    overflow: visible\n\n  button, input, select, textarea\n    font: inherit\n\n  optgroup\n    font-weight: bold\n\n  button, input, select\n    overflow: visible\n\n  button, input, select, textarea\n    margin: 0\n\n  button, select\n    text-transform: none\n\n  button, [type=\"button\"], [type=\"reset\"], [type=\"submit\"]\n    cursor: pointer\n\n  [disabled]\n    cursor: default\n\n  button, html [type=\"button\"], [type=\"reset\"], [type=\"submit\"]\n    -webkit-appearance: button\n\n  button::-moz-focus-inner, input::-moz-focus-inner\n    border: 0\n    padding: 0\n\n  button:-moz-focusring, input:-moz-focusring\n    outline: 1px dotted ButtonText\n\n  fieldset\n    border: 1px solid #c0c0c0\n    margin: 0 2px\n    padding: 0.35em 0.625em 0.75em\n\n  legend\n    box-sizing: border-box\n    -moz-box-sizing: border-box\n    color: inherit\n    display: table\n    max-width: 100%\n    padding: 0\n    white-space: normal\n\n  textarea\n    overflow: auto\n\n  [type=\"checkbox\"], [type=\"radio\"]\n    box-sizing: border-box\n    padding: 0\n\n  [type=\"number\"]::-webkit-inner-spin-button, [type=\"number\"]::-webkit-outer-spin-button\n    height: auto\n\n  [type=\"search\"]\n    -webkit-appearance: textfield\n\n  [type=\"search\"]::-webkit-search-cancel-button, [type=\"search\"]::-webkit-search-decoration\n    -webkit-appearance: none\n\n// Mixin: Fluid Media\n// Makes your img, video, and iframe tags responsive to their parent container.\n\nfluid-media()\n  img,\n  video,\n  iframe\n    max-width: 100%\n    height: auto\n    border: 0\n    -ms-interpolation-mode: bicubic\n    display: block\n\n// Mixin: Border Box HTML\n// Add border box to every element in your project. Used in your project root.\n// http://www.paulirish.com/2012/box-sizing-border-box-ftw/\n\nborder-box-html()\n  html\n    box-sizing: border-box\n\n  *,\n  *:before,\n  *:after\n    box-sizing: inherit\n\n// Mixin: Print Styles\n// Nice clean print styles so you don't have to worry about it.\n\nprint-styles()\n  @media print\n    body\n      width: 100% !important\n      margin: 0 !important\n      padding: 0 !important\n      font-size: 14pt\n      line-height: 1.45\n      font-family: Garamond, \"Times New Roman\", serif\n      color: #000\n      background: none\n\n    h1,\n    h2,\n    h3,\n    h4,\n    h5,\n    h6\n      page-break-after: avoid\n      font-family: \"Helvetica\", Arial, sans-serif\n\n    h1\n      font-size: 36pt\n      line-height: 1.25em\n\n    h2\n      font-size: 24pt\n      line-height: 1.25em\n\n    h3\n      font-size: 18pt\n      line-height: 1.25em\n\n    h4,\n    h5,\n    h6\n      font-size: 14pt\n      line-height: 1.25em\n\n    p,\n    h2,\n    h3\n      orphans: 3\n      widows: 3\n\n    code\n      font: 12pt Courier, $monospace\n\n    blockquote\n      margin: 1.2em\n      padding: 1em\n      font-size: 24pt\n      line-height: 1.45833333em\n      font-style: italic\n\n    hr\n      background-color: #ccc\n\n    img\n      float: left\n      margin: 1em 1.5em 1.5em 0\n      max-width: 100% !important\n\n    a img\n        border: none\n\n    a:link,\n    a:visited\n      background: transparent\n      font-weight: 700\n      text-decoration: underline\n      color: #333\n\n    a:link[href^=\"http://\"]:after,\n    a[href^=\"http://\"]:visited:after\n      content: \" (\" attr(href) \") \"\n      font-size: 90%\n\n    abbr[title]:after\n      content: \" (\" attr(title) \")\"\n\n    a[href^=\"http://\"]\n      color: #000\n\n    a[href$=\".jpg\"]:after,\n    a[href$=\".jpeg\"]:after,\n    a[href$=\".gif\"]:after,\n    a[href$=\".png\"]:after\n      content: \" (\" attr(href) \") \"\n      display: none\n\n    a[href^=\"#\"]:after, a[href^=\"javascript:\"]:after\n      content: \"\"\n\n    table\n      margin: 1px\n      text-align: left\n\n    th\n      border-bottom: 1px solid #333\n      font-weight: bold\n\n    td\n      border-bottom: 1px solid #333\n\n    th,\n    td\n      padding: 4px 10px 4px 0\n\n    tfoot\n      font-style: italic\n\n    caption\n      background: #fff\n      margin-bottom: 2em\n      text-align: left\n\n    thead\n      display: table-header-group\n\n    img,\n    tr\n      page-break-inside: avoid\n","// normalize-css()\nglobal-reset()\nborder-box-html()\n// print-styles()\n\na\n  text-decoration: none\n\n","/**\n * @license\n *\n * Font Family: Clash Display\n * Designed by: Indian Type Foundry\n * URL: https://www.fontshare.com/fonts/clash-display\n * © 2021 Indian Type Foundry\n *\n * Font Styles:\n * Clash Display Variable(Variable font)\n * Clash Display Extralight\n * Clash Display Light\n * Clash Display Regular\n * Clash Display Medium\n * Clash Display Semibold\n * Clash Display Bold\n *\n */\n/**\n* This is a variable font\n* You can controll variable axes as shown below:\n* font-variation-settings: 'wght' 700.0;\n*\n* available axes:\n\n* 'wght' (range from 200.0 to 700.0)\n\n*/\n@font-face\n\tfont-display: swap\n\tfont-family: 'ClashDisplay-Variable'\n\tfont-style: normal\n\tfont-weight: 200 700\n\tsrc: url('../fonts/ClashDisplay-Variable.woff2') format('woff2'), url('../fonts/ClashDisplay-Variable.woff') format('woff'), url('../fonts/ClashDisplay-Variable.ttf') format('truetype')\n\n@font-face\n\tfont-display: swap\n\tfont-family: 'ClashDisplay-Extralight'\n\tfont-style: normal\n\tfont-weight: 200\n\tsrc: url('../fonts/ClashDisplay-Extralight.woff2') format('woff2'), url('../fonts/ClashDisplay-Extralight.woff') format('woff'), url('../fonts/ClashDisplay-Extralight.ttf') format('truetype')\n\n@font-face\n\tfont-display: swap\n\tfont-family: 'ClashDisplay-Light'\n\tfont-style: normal\n\tfont-weight: 300\n\tsrc: url('../fonts/ClashDisplay-Light.woff2') format('woff2'), url('../fonts/ClashDisplay-Light.woff') format('woff'), url('../fonts/ClashDisplay-Light.ttf') format('truetype')\n\n@font-face\n\tfont-display: swap\n\tfont-family: 'ClashDisplay-Regular'\n\tfont-style: normal\n\tfont-weight: 400\n\tsrc: url('../fonts/ClashDisplay-Regular.woff2') format('woff2'), url('../fonts/ClashDisplay-Regular.woff') format('woff'), url('../fonts/ClashDisplay-Regular.ttf') format('truetype')\n\n@font-face\n\tfont-display: swap\n\tfont-family: 'ClashDisplay-Medium'\n\tfont-style: normal\n\tfont-weight: 500\n\tsrc: url('../fonts/ClashDisplay-Medium.woff2') format('woff2'), url('../fonts/ClashDisplay-Medium.woff') format('woff'), url('../fonts/ClashDisplay-Medium.ttf') format('truetype')\n\n@font-face\n\tfont-display: swap\n\tfont-family: 'ClashDisplay-Semibold'\n\tfont-style: normal\n\tfont-weight: 600\n\tsrc: url('../fonts/ClashDisplay-Semibold.woff2') format('woff2'), url('../fonts/ClashDisplay-Semibold.woff') format('woff'), url('../fonts/ClashDisplay-Semibold.ttf') format('truetype')\n\n@font-face\n\tfont-display: swap\n\tfont-family: 'ClashDisplay-Bold'\n\tfont-style: normal\n\tfont-weight: 700\n\tsrc: url('../fonts/ClashDisplay-Bold.woff2') format('woff2'), url('../fonts/ClashDisplay-Bold.woff') format('woff'), url('../fonts/ClashDisplay-Bold.ttf') format('truetype')\n\t\n@font-face {\n    font-family: 'Mayenne Sans_Regular';\n    src:    url('../fonts/Mayenne_Sans-Regular_web.eot');\n    src:    url('../fonts/Mayenne_Sans-Regular_web.eot?#iefix') format('embedded-opentype'),\n            url('../fonts/Mayenne_Sans-Regular_web.woff') format('woff'),\n            url('../fonts/Mayenne_Sans-Regular_web.woff2') format('woff2'),\n            url('../fonts/Mayenne_Sans-Regular_web.ttf') format('truetype'),\n            url('../fonts/Mayenne_Sans-Regular_web.svg#svgFontName') format('svg');\n    font-weight: normal;\n    font-style: normal;\n}\n\n\n",".svg-icon\n\theight: 24px\n\twidth: 24px\n\n.svg-icon path\n\tfill: lighten(#515151, 5%)\n","// ----------\n// Typography\n// ----------\n\n// Alias: Bold\n// It's just faster to type bold() than font-weight: bold\n\nbold()\n  font-weight: bold\n\n// Alias: Italic\n// It's just faster to type italic() than font-style: italic\n\nitalic()\n  font-style: italic\n\n// Alias: Normal\n// Put the font-weight and style back to normal\n\nnormal()\n  font-weight: normal\n  font-style: normal\n\n// Mixin: Raquo\n//\n// Because technically raquo is not semantic, it's better to add it like this.\n//\n// ex. raquo()\n\nraquo()\n  &:after\n    content: \" \\00BB\"\n\n// Mixin: Font Face\n//\n// Super simple font-face declaration. Just give the name and the folder it\n// lives in. Make sure the font name matches the name of the files. Uses the\n// fontspring syntax:\n// http://www.fontspring.com/blog/the-new-bulletproof-font-face-syntax\n//\n// ex. font-face(proxima-nova, '/fonts')\n\nfont-face($name, $folder, $weight = 'normal', $style = 'normal')\n  @font-face\n    font-family: $name\n    src: url($folder unquote('/') $name unquote('.eot') '?#iefix') format('embedded-opentype'), url($folder unquote('/') $name unquote('.woff')) format('woff'), url($folder unquote('/') $name unquote('.ttf')) format('truetype'), url($folder unquote('/') $name unquote('.eot') unquote('#') $name) format('svg');\n    font-weight: unquote($weight)\n    font-style: unquote($style)\n\n\n// Mixin: Ellipsis\n// Truncate text to the width of its container...\n// ex: ellipsis()\n// ex: ellipsis: 300px\n\nellipsis($width = 100%)\n  white-space: nowrap\n  display: inline-block\n  max-width: $width\n  overflow: hidden\n  text-overflow: ellipsis\n  word-wrap: normal\n\n// Function: Line Height\n//\n// If there is a font-size set on the parent element, adjusts the line height to\n// match that. If not, it uses the base font-size to calculate the line-height.\n\n-line-height()\n  if @font-size\n    line-height: 1.6em\n  else\n    line-height: unit($font-size*1.6, 'px')\n    line-height: 1.6rem\n\n// Mixin: Text Margin\n//\n// Puts nice visually pleasing top and bottom margins on a paragraph of text.\n// Put a font-size on your element to have it adjust accordingly.\n//\n// ex. p\n//       font-size: 18px\n//       text-margin()\n\ntext-margin($size = $font-size)\n  if @font-size\n    margin: .75em 0\n  else\n    margin: unit($font-size*.75, 'px') 0\n\n// Mixin: Paragraph\n//\n// Sets a nice size, line-height, and margins on a paragraph of text. Pass a\n// size in to customize. Toggle margins off if you don't want them.\n//\n// ex. p()\n// ex. p: 18px\n// ex. p: 14px false\n\np($size = 1rem, $margins = true)\n  font-size: $size\n  text-margin() if $margins\n  -line-height()\n  open-type-ligatures() if $ligatures\n\n// Alias: paragraph\nparagraph = p\n\n// Alias: Font Size\n// An alias for 'font-size' with auto-fallback for rem.\n// ex. fs: 16px\n// ex. fs: 1.2rem\n\nfs($size)\n  if (unit($size) == 'rem')\n    font-size: round(unit(($font-size*$size), 'px'))\n    font-size: $size\n  else\n    font-size: $size\n\n// Alias: Uppercase\n// An alias for 'text-transform: uppercase'\n// ex. uppercase()\n\nuppercase()\n  text-transform: uppercase\n\n// Alias: Upcase\nupcase = uppercase\n\n// Alias: Lowercase\n// An alias for 'text-transform: lowercase'\n// ex. lowercase()\n\nlowercase()\n  text-transform: lowercase\n\n// Alias: Downcase\ndowncase = lowercase\n\n// Alias: Reset Case\n// Gets rid of an text transform\n// ex. reset-case()\n\nreset-case()\n  text-transform: none\n\n// Mixin: Small\n//\n// Makes your text smaller and a little lighter. Great on <small /> tags.\n//\n// ex. small()\n\nsmall()\n  font-size: 55%\n  opacity: .6\n  font-weight: normal\n\n// Function: Heading\n// For internal use within headings\n\n-heading($multiplier, $margins = true)\n  font-size: unit(($font-size*$multiplier), 'px')\n  font-size: unit($multiplier, 'rem')\n  text-rendering: optimizelegibility\n  font-weight: bold\n  text-margin() if $margins\n  -line-height()\n  openTypeLigatures() if $ligatures\n\n// Mixin Set: h1, h2, h3, h4, h5, h6\n//\n// These provide nice defaults for headings based off the default font size.\n// The can scale infinitely, and work best when matched to their corresponding\n// html elements. If you'd like to change the base size of a header, just pass\n// it as an option.\n//\n// ex. h3()\n// ex. h3: 3.5\n\nh1($size=2.4)\n  -heading($size)\n\nh2($size=1.8)\n  -heading($size)\n\nh3($size=1.5)\n  -heading($size)\n\nh4($size=1.3)\n  -heading($size)\n\nh5($size=1.0)\n  -heading($size)\n\nh6($size=0.9)\n  -heading($size)\n  upcase()\n\n// Mixin: Link\n//\n// A nice default style for links. Accepts a color and a style. Color can be\n// anything, style can be underline, darken, lighten, or glow, each giving it a\n// different style of interaction when hovered. More suggestions here welcome.\n//\n// ex. link()\n// ex. link: green\n// ex. link: #57777E 'glow'\n\nlink($color = $blue, $style = 'underline')\n  color: $color\n  text-decoration: none\n  transition()\n\n  if $style == 'underline'\n    hover-underline()\n    &:hover\n      color: darken(@color, 15%)\n  else if $style == 'darken'\n    &:hover\n      color: darken(@color, 20%)\n  else if $style == 'lighten'\n    hover-lighten()\n  else if $style == 'glow'\n    &:hover\n      text-shadow: 0 0 7px rgba(@color, .6)\n\n  &:visited\n    opacity: .8\n\n// Mixin: Reset Link\n//\n// Sometimes my link mixin of the browser defaults will give you questionable\n// link defaults that you don't want on certain elements. This guy gets rid of\n// that.\n\n// ex. reset-link()\n\nreset-link()\n  border: none\n  text-decoration: none\n  color: initial\n\n  &:hover\n    border: none\n    text-decoration: none\n    color: initial\n\n  &:visited\n    opacity: 1\n\n// Mixin: Text Selection\n//\n// This guy sets the text select color intelligently based on the\n// highlight-color variable found in the settings file. If you really want, you\n// can pass it a color override too.\n\n// ex. text-selection()\n\ntext-selection($color = $highlight-color, $text-color = null)\n\n  $text-color = (light($color) ? white : #494949) unless $text-color\n\n  &::-moz-selection\n    background: $color\n    color: $text-color\n\n  &::selection\n    background: $color\n    color: $text-color\n\n// Mixin: Ul\n//\n// A nice default for list styles. More or less the same as browser defaults,\n// scales nicely. You can pass it any style that list-style-type would normally\n// take. Defaults to disc. Use this on a ul element por favor.\n//\n// ex. ul()\n// ex. ul: 'square'\n\nul($style = 'disc')\n  margin: 5px 15px\n  margin: 0.32rem 0.94rem\n  padding-left: 1rem\n\n  li\n    list-style-type: unquote($style)\n    padding: 2px 0\n    padding: 0.125rem\n\n// Mixin: Ol\n//\n// A nice default for list styles. More or less the same as browser defaults,\n// scales nicely. You can pass it any style that list-style-type would normally\n// take. Defaults to decimal. Use this on a ol element por favor.\n//\n// ex. ol()\n// ex. ol: 'upper-roman'\n\nol($style = 'decimal')\n  margin: 5px 18px\n  margin: 0.32rem 1.125rem\n  padding-left: 1rem\n\n  li\n    list-style-type: unquote($style)\n    padding: 2px 0\n    padding: 0.125rem\n\n// Mixin: Inline List\n//\n// For when you need your list to be horizontal. Pass it the spacing you want\n// between list elements, whatever units you'd like. Defaults to 20px.\n//\n// ex. inline-list()\n// ex. inline-list: 15px\n\ninline-list($spacing = 20px)\n  group()\n  margin: 0\n  padding: 0\n\n  li\n    float: left\n    margin-right: $spacing\n    list-style-type: none\n\n  li:last-child\n    margin-right: 0\n\n// Mixin: Reset List\n//\n// If you're tired of all the list shenanigans and want to get rid of them for\n// this special list you're working on, this is your guy. Resets the margins,\n// padding, and style.\n//\n// ex. reset-list()\n\nreset-list()\n  margin: 0\n  padding: 0\n\n  li\n    float: none\n    list-style-type: none\n    padding: 0\n    margin: 0\n\n// Mixin: Blockquote\n//\n// Nice styles for a blockquote, and even puts a nice hyphen in before your\n// citation. Use with a <p> and <cite>, <footer>, or <figcaption> inside for\n// best results. Pass a color or 'none' to set the left border.\n//\n// ex. blockquote()\n\nblockquote($color = $blue)\n  border-left: 4px solid $color\n  margin: 1em 0\n  padding-left: 1.5em\n  group()\n\n  > p\n    font-weight: 300\n    font-size: 127%\n    font-size: 1.27rem\n    line-height: 127%\n    line-height: 1.27rem\n    margin-top: 0\n\n  > cite, > footer, > figcaption\n    color: #888888\n    &:before\n      content: '\\2014'\n\n// Alias: blockquo\nblockquo = blockquote\n\n// Hyphenation\n//\n// Hyphenation is the better word-break. It’s locale aware, and inserts the\n// hyphen character at the correct place, when breaking the words. This is\n// especially important in responsive designs. It will save you from a lot of\n// ragged lines. And, no need anymore for clunky & slow Javascript hyphenation\n// fallbacks. Taken from http://www.newnet-soft.com/blog/csstypography\n//\n// ex. hyphenation()\n\nhyphenation()\n    -ms-word-break: break-all\n    word-break:     break-all\n    word-break:     break-word // webkit\n    hyphens: auto // none, auto, <number>\n    -webkit-hyphenate-before: 2\n    -webkit-hyphenate-after:  3\n    hyphenate-lines:          3\n\n// Mixin: Shadow Stroke\n//\n// Creates a text outline using text-shadow. Ported from nib.\n// Takes a color.\n//\n// ex: shadow-stroke()\n// ex: sahdow-stroke(red)\n\nshadow-stroke($color = $blue)\n  text-shadow: -1px -1px 0 $color, 1px -1px 0 $color, -1px 1px 0 $color, 1px 1px 0 $color\n\n// Additive Mixin: Base\n//\n// WARNING: Creates classes in your css and styles them - not to be used inside\n// an element.\n//\n// This is an essential mixin. You want this on your page. Sets your font stack,\n// size, and colors based on the settings file and makes sure that your text is\n// a great looking as possible. You can override any of the params, but there is\n// really no reason to.\n//\n// ex. base()\n\nbase($fonts = $font-stack, $size = $font-size, $color = $font-color)\n  html\n    font-size: unit($size, 'px')\n    font-size: unit(($size/16)*100, \"%\")\n\n  body\n    font-family: $fonts\n    color: $color\n    -webkit-font-smoothing: antialiased\n    -webkit-text-size-adjust: 100%\n    -ms-text-size-adjust: 100%\n    font-size-adjust: auto\n\n// Additive Mixin: Headers\n//\n// WARNING: Creates classes in your css and styles them - not to be used inside\n// an element.\n//\n// Adds roots' wonderful scaling header styles to your <hx> tags.\n//\n// ex. headers()\n\nheaders()\n  h1\n    h1()\n\n  h2\n    h2()\n\n  h3\n    h3()\n\n  h4\n    h4()\n\n  h5\n    h5()\n\n  h6\n    h6()\n\n// Additive Mixin: Lists\n//\n// WARNING: Creates classes in your css and styles them - not to be used inside\n// an element.\n//\n// Adds roots' styles to ul and ols.\n//\n// ex. lists()\n\nlists()\n  ul\n    ul()\n  ol\n    ol()\n\n// Additive Mixin: Bold-Italic\n//\n// WARNING: Creates classes in your css and styles them - not to be used inside\n// an element.\n//\n// Adds bold and italic styles to the right tags if you did a global reset.\n//\n// ex. bold-italic()\n\nbold-italic()\n  b\n    bold()\n  i\n    italic()\n  strong\n    bold()\n  em\n    italic()\n\n// Additive Mixin: Typography\n//\n// WARNING: Creates classes in your css and styles them - not to be used inside\n// an element.\n//\n// Adds roots' styles to bold and italic elements, headers, paragrapgs, small\n// text, links, lists, and blockquotes. Got all your basic elements covered.\n//\n// ex. typography()\n\ntypography()\n  bold-italic()\n  headers()\n  lists()\n  text-selection()\n\n  p\n    paragraph()\n\n  small\n    small()\n\n  a\n    link()\n\n  blockquote\n    blockquo()\n\n  .hyphenation\n    hyphenation()\n","// FONT-STACKS\nsystem = BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif // system\nhelvetica = 'Helvetica Neue', Helvetica, Arial, sans-serif\ngeorgia = Georgia, Cambria, 'Times New Roman', Times, serif\n\ntitle-color = #515151\ntext-color = #515151\nlink-color = #515151\nlink-color_hover = #000\n\nfontSizes = {\n  desktop: {\n    xs: 1.125em,\n    s: 1.25em,\n    l: 3em\n  },\n  tablet: {\n    s: 1.125em,\n    l: 2.5em,\n  }\n  mobile: {\n    s: 1.0625em,\n    l: 2.125em\n  }\n}\n\nclash-display-r = 'ClashDisplay-Regular', helvetica\nclash-display-m = 'ClashDisplay-Medium', helvetica\nibm-plex-serif = 'IBM Plex Serif', georgia\n\n\ntext-selection(black, white)\n\nbody\n  font-family: clash-display-r\n  line-height 1.5\n\na\n  color link-color\n  font-family clash-display-r\n  &:hover\n    color link-color_hover\n\n\n","// .blog-post\n//  display: grid\n//  grid-column-gap: 4em\n//  grid-template-columns: 1fr 1fr\n\n//  > .title\n//    grid-column: 1 / -1\n\n//  > .text\n//    grid-column: 1 / 2\n\n//  > .image\n//    grid-column: 2 / 3\n//    grid-row: 2 / 5\n//    margin-top: 18px\n\n.blog-post\n  padding 2.5em 1em 5em 1em\n  \n  > .title\n    // margin: 1em 1em 0 0\n    font-size fontSizes.mobile.l\n    +tablet()\n      font-size fontSizes.tablet.l\n    +desktop()\n      font-size fontSizes.desktop.l\n    \n  > .date\n    display block\n    margin-bottom 3em \n  \n  > .image\n    float left\n    margin-right 2em \n    margin-bottom 2em\n    \n  > .text\n    font-family: ibm-plex-serif\n    font-size fontSizes.mobile.s\n    margin-bottom 1.2em  \n    +tablet()\n      font-size fontSizes.tablet.s\n    +desktop()\n      font-size fontSizes.desktop.s \n","base-font-size ?= 16px\nrasterise-media-queries ?= false\n\nrupture = {\n  rasterise-media-queries: rasterise-media-queries\n  mobile-cutoff: 400px\n  desktop-cutoff: 1050px\n  hd-cutoff: 1800px\n  enable-em-breakpoints: false\n  base-font-size: base-font-size\n  anti-overlap: false\n  density-queries: 'dppx' 'webkit' 'moz' 'dpi'\n  retina-density: 1.5\n  use-device-width: false\n}\nrupture.scale = 0 (rupture.mobile-cutoff) 600px 800px (rupture.desktop-cutoff) (rupture.hd-cutoff)\nrupture.scale-names = 'xs' 's' 'm' 'l' 'xl' 'hd'\n\n-is-string(val)\n  if typeof(val) is not 'unit'\n    if val is a 'string' or val is a 'ident'\n      true\n    else\n      false\n  else\n    false\n\n-get-scale-number(scale-name)\n  for list-item, i in rupture.scale-names\n    if list-item is scale-name\n      return i + 1\n  return false\n\n-convert-to(to-unit, value, context = rupture.base-font-size)\n  from-unit = unit(value)\n  return value if to-unit is from-unit\n  if to-unit in ('em' 'rem')\n    return value if from-unit in ('em' 'rem')\n    return unit((value / context), to-unit)\n  if to-unit is 'px'\n    return unit((value * context), 'px')\n\n-on-scale(n)\n  return unit(n) is ''\n\n-larger-than-scale(n)\n  return (n > (length(rupture.scale) - 1)) and -on-scale(n)\n\n-is-zero(n)\n  return n is 0\n\n-overlap-shift(anti-overlap, n)\n  shift-unit = unit(n)\n  anti-overlap = 0px unless anti-overlap\n  anti-overlap = 1px if anti-overlap is true\n  if length(anti-overlap) is 1\n    return -convert-to(shift-unit, anti-overlap)\n  for val in anti-overlap\n    return val if unit(val) is shift-unit\n\n-adjust-overlap(anti-overlap, n, side = 'min')\n  -shift = -overlap-shift(anti-overlap, n)\n  if (side is 'min' and -shift > 0) or (side is 'max' and -shift < 0)\n    n = n + -shift\n  return n\n\n-is-positive(n)\n  return n >= 0\n\n-density-queries(density)\n  if typeof(density) is not 'unit'\n    if not -is-string(density)\n      density = '%s' % density\n  density = rupture.retina-density if density is 'retina'\n  queries = ()\n  for query in rupture.density-queries\n    if query is 'webkit'\n      push(queries, '(-webkit-min-device-pixel-ratio: %s)' % (density))\n    else if query is 'moz'\n      push(queries, '(min--moz-device-pixel-ratio: %s)' % (density))\n    else if query is 'o'\n      push(queries, '(-o-min-device-pixel-ratio: %s/1)' % (density))\n    else if query is 'ratio'\n      push(queries, '(min-device-pixel-ratio: %s)' % (density))\n    else if query is 'dpi'\n      if -is-string(density)\n        density=convert(density)\n      push(queries, '(min-resolution: %sdpi)' % (round(density * 96, 1)))\n    else if query is 'dppx'\n      push(queries, '(min-resolution: %sdppx)' % (density))\n  return queries\n\ncreate-fallback-class(selected, class)\n  /{'' + class + ' ' + selected}\n    {block}\n\n// +between(min, max)\n// usage (scale can be mixed with custom values):\n//   - +between(1, 3) scale:scale\n//   - +between(0, 3) 0 width:scale\n//   - +between(200px, 500px) custom:custom\n//   - +between(0, 300px) 0 width:custom\n//   - +between(1, 300px) scale:custom\n//   - +between(200px, 4) custom:scale\n\nbetween(min, max, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  selected = selector()\n\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  if -is-string(min)\n    min = -get-scale-number(min)\n  if -is-string(max)\n    max = -get-scale-number(max)\n\n  -min = rupture.scale[min - 1] unless -is-zero(min) or (not -on-scale(min))\n  -max = rupture.scale[max] unless not -on-scale(max)\n  -min ?= min\n  -max ?= max\n\n  if (rupture.rasterise-media-queries)\n    if not (density or -max or orientation)\n      {block}\n  else\n    condition = 'only screen'\n    use-device-width = use-device-width ? 'device-' : ''\n    unless -min is 0\n      -min = -convert-to('em', -min) if rupture.enable-em-breakpoints\n      -min = -adjust-overlap(anti-overlap, -min, side: 'min')\n      condition = condition + ' and (min-' + use-device-width + 'width: %s)' % (-min)\n    unless -larger-than-scale(max)\n      -max = -convert-to('em', -max) if rupture.enable-em-breakpoints\n      -max = -adjust-overlap(anti-overlap, -max, side: 'max')\n      condition = condition + ' and (max-' + use-device-width + 'width: %s)' % (-max)\n    if orientation\n      condition = condition + ' and (orientation: %s)' % (orientation)\n    if density\n      conditions = ()\n      for query in -density-queries(density)\n        push(conditions, condition + ' and %s' % (query))\n      condition = join(', ', conditions)\n    @media condition\n      {block}\n  if fallback-class\n    +create-fallback-class(selected, fallback-class)\n      {block}\n\nat(scale-point, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(scale-point, scale-point, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nfrom-width(scale-point, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(scale-point, length(rupture.scale), anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nabove = from-width\n\nto-width(scale-point, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(1, scale-point, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nbelow = to-width\n\nmobile(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +below(rupture.mobile-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\ntablet(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(rupture.mobile-cutoff, rupture.desktop-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\ndesktop(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +above(rupture.desktop-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nhd(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +above(rupture.hd-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\ndensity(density, orientation = null, fallback-class = null)\n  selected = selector()\n  if not (rupture.rasterise-media-queries)\n    conditions = ()\n    for query in -density-queries(density)\n      condition = 'only screen and %s' % (query)\n      if orientation\n        condition = condition + ' and (orientation: %s)' % (orientation)\n      push(conditions, condition)\n    condition = join(', ', conditions)\n    @media condition\n      {block}\n    if fallback-class\n      +create-fallback-class(selected, fallback-class)\n        {block}\n\npixel-ratio = density\n\nretina(orientation = null, fallback-class = null)\n  +density('retina', orientation, fallback-class)\n    {block}\n\nlandscape(density = null, fallback-class = null)\n  selected = selector()\n  if not (rupture.rasterise-media-queries)\n    if -is-string(density)\n      density = convert(density)\n    if density\n      +pixel-ratio(density, orientation: landscape, fallback-class)\n        {block}\n    else\n      @media only screen and (orientation: landscape)\n        {block}\n      if fallback-class\n        +create-fallback-class(selected, fallback-class)\n          {block}\n\nportrait(density = null, fallback-class = null)\n  selected = selector()\n  if not (rupture.rasterise-media-queries)\n    if -is-string(density)\n      density = convert(density)\n    if density\n      +pixel-ratio(density, orientation: portrait, fallback-class)\n        {block}\n    else\n      @media only screen and (orientation: portrait)\n        {block}\n      if fallback-class\n        +create-fallback-class(selected, fallback-class)\n          {block}\n\nrupture-hover(density = null, orientation = null, fallback-class = null)\n  condition = \"only screen and (hover: hover)\";\n  @media ({condition})\n    {block}\n\nhover = rupture-hover\n",".branding-box\n  // background: red\n  \n  +mobile()\n    grid-column: 1 / 3\n  \n  > img\n    display none","main\n  margin: 0 auto\n  max-width: 1200px\n  // padding: 3em 1em;\n\n.hero-section\n  padding 1.5em 1em 5em 1em\n  +tablet()\n    padding-top 3em\n    padding-left 1.5em\n    background lighten(cyan, 80%)    \n  +desktop()\n    padding-top 5em\n    // background lighten(magenta, 80%)\n  \n  > .title\n    color: black\n    font-family 'ClashDisplay-Semibold'\n    line-height 1.1\n    max-width 14ch\n    font-size fontSizes.mobile.l\n    // font-weight 500 \n    +tablet()\n      font-size fontSizes.tablet.l\n    +desktop()\n      font-size fontSizes.desktop.l \n\n  > .message\n    margin: 1.8em 0 1.7em 0\n    color: text-color\n    font-family: ibm-plex-serif\n    max-width 35ch\n    font-size 1em \n    +tablet()\n      font-size fontSizes.tablet.s\n    +desktop()\n      font-size fontSizes.desktop.s\n\n  hover-color = magenta\n  border-color = black\n\n  > .button\n    display flex\n    width 9em\n    justify-content center \n    hover-glow(hover-color, 45px) \n    border: 1px solid border-color\n    border-radius: 4px\n    padding: 0.5em 2em\n    background white\n    font-size fontSizes.mobile.s\n    transition border 1s $ease-in-out-quart, box-shadow 0.4s ease\n    +desktop()\n      font-size fontSizes.desktop.xs\n      \n    \n    &:hover\n      border 1px solid darken(hover-color, 25%)\n      // transform scale(1.1)\n      // animation rebote 0.1s\n      // animation-duration 1s\n","// ---------\n// Utilities\n// ---------\n\n// Alias: No Select\n// You can't highlight this.\n\nno-select()\n  -webkit-touch-callout: none\n  user-select: none\n\n// Alias: B\n// Border, but quicker and with an intelligent default.\n\nb()\n  arguments = unquote('1px solid') unless arguments\n  border: arguments\n\n// Alias: Transition\n//\n// Transition with an intelligent default.\n//\n// ex. transition()\n// ex. transition: color 1s ease\n// ex. transition(color 1s ease, background 2.4s linear)\n\ntransition()\n  arguments = unquote('all .3s ease') unless arguments\n  transition: arguments\n\n// Alias: Border Box\n// A quicker way to specify border-box sizing.\n\nborder-box()\n  box-sizing: border-box\n\n// Alias: Opentype ligatures\n//\n// The vast majority of fonts contain lowercase and uppercase alphabets,\n// numerals, punctuation and accents. Many professionally-designed fonts\n// also contain ligatures, alternative characters, smallcaps, different kinds of\n// numbers, and sometimes much more besides. This enables it.\n//\n// Source: http://www.newnet-soft.com/blog/csstypography\n// Additional: http://blog.fontdeck.com/post/15777165734/opentype-1\n\nopen-type-ligatures()\n  font-feature-settings: \"liga\", \"dlig\"\n\n// Alias: Multi-line padding\n//\n// You can not apply the background and padding to a <span> or an inline element.\n// The left and right padding will only apply to the very first and very last line.\n// On each of the middle lines, the background will butt up immediately next to the text.\n//\n// The attribute box-decoration-break solves this problem but needs prefixing.\n//\n// Source: http://codepen.io/chriscoyier/pen/hIvFe\n\nmulti-line-padding()\n  box-decoration-break: clone;\n\n// Mixin: Rounded\n//\n// Unless you are working with a ridiculously large element, this will round the\n// corners as much as css will allow. Even in IE.\n//\n// ex. rounded()\n\nrounded()\n  border-radius: 999px\n\n// Mixin: Triangle\n//\n// One of my favorites. Makes a little css triangle for you. Pass it a direction\n// (up, down, left, right), size (in pixels), and a color.\n//\n// ex. triangle()\n// ex. triangle: 'down' 15px blue\n\ntriangle($direction = 'up', $size = 10px, $color = #000)\n  width: 0\n  height: 0\n  if $direction == 'up'\n    border-left: $size solid transparent\n    border-right: $size solid transparent\n    border-bottom: $size solid $color\n  else if $direction == 'down'\n    border-left: $size solid transparent\n    border-right: $size solid transparent\n    border-top: $size solid $color\n  else if $direction == 'left'\n    border-top: $size solid transparent\n    border-bottom: $size solid transparent\n    border-right: $size solid $color\n  else if $direction == 'right'\n    border-top: $size solid transparent\n    border-bottom: $size solid transparent\n    border-left: $size solid $color\n\n// Mixin: Debug\n//\n// Debugging tool - adds a border to the current element, its children,\n// grandchildren, etc so you can see what's up – great for precise layout\n// tweaks.  It will also add flags if you made mistakes like put in inline\n// styles, forgot an alt on an image, left the alt blank, etc. Not to be used\n// in production, obviously.\n//\n// via dbox: http://codepen.io/dbox/pen/GJZzYo?editors=110\n\ndebug()\n  border 1px solid MediumPurple\n  > *\n    border 1px solid DarkKhaki\n  > * > *\n    border 1px solid MediumTurquoise\n  > * > * > *\n    border 1px solid LightSlateGray\n  > * > * > * > *\n    border 1px solid LightBlue\n  > * > * > * > * > *\n    border 1px solid MediumSlateBlue\n  > * > * > * > * > * > *\n    border 1px solid DeepSkyBlue\n  > * > * > * > * > * > * > *\n    border 1px solid DarkSeaGreen\n\n  img\n    border: 1px solid #f00\n    -webkit-filter: hue-rotate(330deg) contrast(.75) saturate(6)\n    filter: hue-rotate(330deg) contrast(.75) saturate(6)\n\n  img[alt]\n    border: 1px solid LimeGreen\n    -webkit-filter: none\n    filter: none\n\n  img[alt=\"\"]\n    border: 1px solid gold\n    -webkit-filter: contrast(1) saturate(2)\n    filter: contrast(1) saturate(2)\n\n  a\n    background: rgba(#f00, .1)\n    border: 1px solid #f00\n\n  a[title]\n    background: none\n    border-color: LimeGreen\n\n  style\n    border: block\n\n  [style], style, [class=\"\"], [id=\"\"], a[href=\"#\"]\n    background: rgba(yellow, .2)\n    border: 1px solid gold\n\n// Block Mixin: Quantity Queries\n//\n// Set rules for a selector based on a specific sibling count.\n// via: https://github.com/pascalduez/postcss-quantity-queries\n//\n// ex. +quantity-at-least(6)\n// ex. +quantity-at-most(12, div)\n// ex. +quantity-between(0, 8, span)\n// ex. +quantity-exactly(5)\n\nquantity-at-least($count = 4, $selector = li)\n  & > {$selector}:nth-last-child(n+{$count})\n  & > {$selector}:nth-last-child(n+{$count}) ~ {$selector}\n    {block}\n\nquantity-at-most($count = 4, $selector = li)\n  & > {$selector}:nth-last-child(-n+{$count}):first-child\n  & > {$selector}:nth-last-child(-n+{$count}):first-child ~ {$selector}\n    {block}\n\nquantity-between($start = 0, $end = 10, $selector = li)\n  & > {$selector}:nth-last-child(n+{$start}):nth-last-child(-n+{$end}):first-child\n  & > {$selector}:nth-last-child(n+{$start}):nth-last-child(-n+{$end}):first-child ~ {$selector}\n    {block}\n\nquantity-exactly($count = 4, $selector = li)\n  & > {$selector}:nth-last-child({$count}):first-child\n  & > {$selector}:nth-last-child({$count}):first-child ~ {$selector}\n    {block}\n\n// Function: Rem Calculator\n//\n// Calculates and returns the rem value based on px input. Default base font\n// size is 16px, but can be changed with base-font-size.\n//\n// ex       : rem(30px) or rem(30)\n// returns  : 1.875rem\n\nrem($value)\n  $base-font-size ?= 16px\n  $type = unit($value)\n  if $type == px\n    return unit($value / $base-font-size, 'rem')\n  else\n    return unit($value, $type)\n\n// Custom animation timing functions, ported from bourbon\n// https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/addons/_timing-functions.scss\n\n// ease-in\n$ease-in-quad =      cubic-bezier(0.550,  0.085, 0.680, 0.530)\n$ease-in-cubic =     cubic-bezier(0.550,  0.055, 0.675, 0.190)\n$ease-in-quart =     cubic-bezier(0.895,  0.030, 0.685, 0.220)\n$ease-in-quint =     cubic-bezier(0.755,  0.050, 0.855, 0.060)\n$ease-in-sine =      cubic-bezier(0.470,  0.000, 0.745, 0.715)\n$ease-in-expo =      cubic-bezier(0.950,  0.050, 0.795, 0.035)\n$ease-in-circ =      cubic-bezier(0.600,  0.040, 0.980, 0.335)\n$ease-in-back =      cubic-bezier(0.600, -0.280, 0.735, 0.045)\n$ease-in-swift =     cubic-bezier(0.900,  0.000, 0.450, 1.000)\n\n// ease-out\n$ease-out-quad =     cubic-bezier(0.250,  0.460, 0.450, 0.940)\n$ease-out-cubic =    cubic-bezier(0.215,  0.610, 0.355, 1.000)\n$ease-out-quart =    cubic-bezier(0.165,  0.840, 0.440, 1.000)\n$ease-out-quint =    cubic-bezier(0.230,  1.000, 0.320, 1.000)\n$ease-out-sine =     cubic-bezier(0.390,  0.575, 0.565, 1.000)\n$ease-out-expo =     cubic-bezier(0.190,  1.000, 0.220, 1.000)\n$ease-out-circ =     cubic-bezier(0.075,  0.820, 0.165, 1.000)\n$ease-out-back =     cubic-bezier(0.175,  0.885, 0.320, 1.275)\n$ease-out-swift =    cubic-bezier(0.550,  0.000, 0.100, 1.000)\n\n// ease-in-out\n$ease-in-out-quad =  cubic-bezier(0.455,  0.030, 0.515, 0.955)\n$ease-in-out-cubic = cubic-bezier(0.645,  0.045, 0.355, 1.000)\n$ease-in-out-quart = cubic-bezier(0.770,  0.000, 0.175, 1.000)\n$ease-in-out-quint = cubic-bezier(0.860,  0.000, 0.070, 1.000)\n$ease-in-out-sine =  cubic-bezier(0.445,  0.050, 0.550, 0.950)\n$ease-in-out-expo =  cubic-bezier(1.000,  0.000, 0.000, 1.000)\n$ease-in-out-circ =  cubic-bezier(0.785,  0.135, 0.150, 0.860)\n$ease-in-out-back =  cubic-bezier(0.680, -0.550, 0.265, 1.550)\n$ease-in-out-swift = cubic-bezier(0.900,  0.000, 0.100, 1.000)\n","// -----------\n// Interaction\n// -----------\n\n// These mixins trigger on some sort of interaction with an element, like a\n// hover or a click.\n\n// Mixin: Hover Darken\n//\n// Darkens the color and/or background color on your element when it's hovered.\n// Takes an optional percentage to darken it.\n//\n// ex. hover-darken()\n// ex. hover-darken: 30%\n\nhover-darken($percent = 15%, $force-use-color = false)\n  &:hover\n    if @background and !$force-use-color\n      background-color: darken(@background, $percent)\n    else if @background-color and !$force-use-color\n      background-color: darken(@background-color, $percent)\n    else if @color\n      color: darken(@color, $percent)\n    else\n      warn('you need to set a color or background color on your element for this to work')\n\n// Mixin: Hover Lighten\n//\n// Works the same way as hover-darken but lightens the color.\n//\n// ex. hover-lighten()\n// ex. hover-lighten: 30%\n\nhover-lighten($percent = 15%, $force-use-color = false)\n  &:hover\n    if @background and !$force-use-color\n      background-color: lighten(@background, $percent)\n    else if @background-color and !$force-use-color\n      background-color: lighten(@background-color, $percent)\n    else if @color\n      color: lighten(@color, $percent)\n    else\n      warn('you need to set a color or background color on your element for this to work')\n\n// Mixin: Hover Underline\n//\n// This one is interesting, and may need tweaking to get it to work right on the\n// intended element. Works very nicely for text like in a span, and can animate.\n//\n// ex. hover-underline()\n// ex. hover-underline: 2px 'dotted'\n\nhover-underline($border-size = 1px, $type = 'solid', $color = null)\n  border-bottom: $border-size unquote($type) transparent\n\n  &:hover\n    border-bottom: $border-size unquote($type) $color\n\n// Mixin: Hover Pop\n//\n// On hover, your element pops out from the page. For scale, it takes an integer\n// or float, 1 represents 100%, 2 is 200%, etc. Optionally can also rotate,\n// pass it a number followed by \"deg\", like 180deg. If you pass true for\n// shadow, it will animate in a drop shadow to add to the effect.\n//\n// ex. hover-pop: 1.5\n// ex. hover-pop: 2.6 90deg\n// ex. hover-pop: 1.2 45deg true\n\nhover-pop($scale = 1.2, $rotate = null, $shadow = null)\n  if $shadow\n    box-shadow: 0 0 1px transparent\n\n  &:hover\n    position: relative\n    z-index: 10\n    transform: scale($scale)\n    if $shadow\n      box-shadow: 0 0 5px rgba(#000, .3)\n    if $rotate\n      transform: scale($scale) rotate($rotate)\n\n// Mixin: Hover Fade\n//\n// On hover, fades the element's opacity down. Takes an amount as an integer\n// between 0 and 1, like opacity normally does. Recommended to be used with\n// transition.\n\n// ex. hover-fade: .5\n\nhover-fade($amount = .5)\n  &:hover\n    opacity: $amount\n\n// Mixin: Hover Color\n//\n// Will swap an elements color or background color on hover. Takes a color in\n// any format as the first argument. Will first look for a background color to\n// change, then a color.\n//\n// ex. hover-color: #D45D86\n\nhover-color($color, $force-use-color = false)\n  &:hover\n    if @background and !$force-use-color\n      background-color: $color\n    else if @background-color and !$force-use-color\n      background-color: $color\n    else if @background-color and !force-use-color\n      background-color: $color\n    else if @color\n      color: $color\n    else\n      warn('you need to set a color or background color on your element for this to work')\n\n// Mixin: Hover Glow\n//\n// Creates a glow when hovering an element. Takes a color and a radius (size).\n// Recommended to be used with transition.\n//\n// ex: hover-glow()\n\nhover-glow($color = rgba(blue, .8),  $radius = 20px )\n  &:hover\n    box-shadow: 0px 0px $radius 2px $color\n\n// Mixin: Hover Float\n//\n// Gives an element the effect of rising up vertically with a small shadow\n//  underneath. Recommended to be use with transition.\n//\n// Ex: hover-float()\n\nhover-float()\n  position: relative\n\n  &:before\n    pointer-events: none\n    position: absolute\n    z-index: -1\n    content: ''\n    top: 108%\n    left: 5%\n    height: 10px\n    width: 90%\n    opacity: 0\n    background: radial-gradient(ellipse at center, rgba(0, 0, 0, 0.25) 0%, rgba(0, 0, 0, 0) 80%)\n\n  &:hover\n    transform: translateY(-7px)\n    &:before\n      opacity: 1\n      transform: scale(1)\n\n// Mixin: Click Down\n//\n// Move an element down while clicked/tapped. Takes distance.\n//\n// ex: click-down()\n\nclick-down($distance = 1px)\n  &:active\n    transform: translateY($distance)\n\n// Mixin: Click Shadow\n//\n// Creates a shadow under element while clicked/tapped. Takes distance and\n// radius (size). Recommended to be use with transition.\n//\n// ex: click-shadow()\n\nclick-shadow($distance = 2px, $radius = 10px )\n  &:active\n    box-shadow: 0px $distance $radius 2px rgba(0, 0, 0, 0.25)\n\n// Mixin: Click Inset\n//\n// Creates an inset shadow on an elment while clicked/tapped. Takes radius\n// (inset shadow size). Recommended to be use with transition.\n//\n// ex: click-inset()\n\nclick-inset($radius = 20px)\n  $distance = $radius / 2\n  &:active\n    box-shadow: inset 0px $distance $radius rgba(0, 0, 0, 0.35);\n\n// Mixin: Click Shrink\n//\n// Scale down an element when clicked/tapped. Gives the effect of \"sinking\"\n// or lowering on the z-axis.\n//\n// ex: click-shrink()\n\nclick-shrink($distance = .92)\n  &:active\n    transform: scale($distance)\n",".main-nav\n  display flex\n  justify-content space-between\n    \n  +mobile()\n    grid-column: 1 / -1\n  \n  > .list-item\n    margin 0 10px\n\n    &.-active\n      border-bottom: 2px solid black\n    \n  > .list-item .link\n    font-size fontSizes.mobile.s\n    +tablet()\n      font-size fontSizes.tablet.s\n    +desktop()\n      font-size fontSizes.desktop.xs\n","  // --color-blocklink: #515151\n  // --color-blocklink-hover: #000000\n\nheader\n  border-bottom: 1px dashed gray\n  margin: 0px\n\n.nav-bar\n  align-items: center\n  display: flex\n  justify-content: space-between\n  margin: 0 auto\n  max-width: 1200px\n  padding: 24px 24px\n  \n  +mobile()\n    display grid\n    grid-gap 24px 0\n    grid-template-columns 1fr 1fr 1fr \n    grid-template-rows 1fr 1fr\n\n\n\n\n\n    \n\n\n\n\n\n",".post-list\n  margin-top: 3%\n  \n  > .heading\n    line-height: 5em\n    margin-left 1em\n    font-family: clash-display-m\n    font-size fontSizes.mobile.s\n    uppercase()\n    // color red \n\n.blog-entry\n  align-items: center\n  border-top: 1px solid black\n  display: grid\n  grid-template-columns: 1fr 3fr\n  justify-items: stretch\n\n  &:last-child\n    border-bottom: 1px solid black\n\n  > .date\n    margin-left: 1em\n    font-family 'ClashDisplay-Light'\n    font-size fontSizes.mobile.s\n    +tablet()\n      font-size fontSizes.tablet.s\n    +desktop()\n      font-size fontSizes.desktop.xs\n\n  > .link\n    cursor: pointer\n    padding: 2em 1em\n    font-family clash-display-r\n    font-size fontSizes.mobile.s\n    +tablet()\n      font-size fontSizes.tablet.s\n    +desktop()\n      font-size fontSizes.desktop.xs\n\n    & span\n      display: inline-block\n      white-space: pre\n\n// STYLES FOR THE ANIMATION\n.hover-reveal\n  height: 150px\n  left: 0\n  opacity: 0\n  pointer-events: none\n  position: fixed\n  top: 0\n  width: 200px\n\n.hover-reveal__inner, .hover-reveal__img\n  height: 100%\n  position: relative\n  width: 100%\n\n.hover-reveal__deco\n  background-color: #181314\n  height: 100%\n  left: 0\n  position: absolute\n  top: 0\n  width: 100%\n\n.hover-reveal__img\n  background-position: 50% 50%\n  background-size: cover\n",".social-nav\n  \n  +mobile()\n    grid-column: 3 / 4\n    grid-row: 1 / 2\n    justify-self: center","@import 'base/*'\n@import 'components/*'\n@import 'layout/*'\n@import 'themes/*'\n\n// #cursor {\n//   --size: 40px;\n//   position: fixed;\n//   top: 0;\n//   left: 0;\n//   height: var(--size);\n//   width: var(--size);\n//   background-color: #000;\n//   opacity: 0.3;\n//   border-radius: 50%;\n//   transform: translate3d(calc(100vw * var(--cursor-x) - var(--size) / 2), calc(100vh * var(--cursor-y) - var(--size) / 2), 0);\n//   pointer-events: none;\n// }\n\n@media (any-pointer: fine) {\n  .cursor {\n    position: fixed;\n    top: 0;\n    left: 0;\n    display: block;\n    pointer-events: none;\n  }\n  .cursor__inner {\n    fill: magenta;\n    stroke: magenta;\n    stroke-width: 1;\n    opacity: 0.5;\n  }\n}"]}